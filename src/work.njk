---
title: Harmonic Coherence - The Works
layout: 'base.njk'
---

    
    <ul class="section-wrapper">
    {% set count = 0 %}
        {%- for post in collections.featured | reverse -%}
            {% if count < 1 %}
                      <article class="feature-container normalwide">
                            <div class="feature-image" style="width: 3fr; background-image: url('/static/{{ post.data.image }}'); background-size: cover; background-position: center">
                               <div class="tag">{{ post.data.tags }}</div>
                            </div>
                            <div class="teaser-card" style="width: 4fr">
                              <div class="titlebox">
                                  <h2>{{ post.data.title }}</h2>
                              </div>
                             <div class="textbox">
                                    <p style="width: 100%;">{{ post.data.preview }}</p>
                                    <a class="link" href="{{ post.url }}">read more<div class="href-arrow"></div></a>
                              </div>
                         </div>
                        </article>
                {% set count = count + 1 %}
            {% endif %}
        {%- endfor -%}
    </ul>


<div style="width: 100vw; max-width:1520px; overflow:auto">
  <div class="filters-container">
    <div class="spacer"></div>
    <div class="button-filter selected" data-filter="all">All<div class="underline underline-selected"></div></div>
    <div class="button-filter" data-filter="Project">Projects<div class="underline"></div></div>
    <div class="button-filter" data-filter="Preprint">Preprints<div class="underline"></div></div>
    <div class="button-filter" style="width:115px; display:none;" data-filter="Peer-reviewed">Peer-reviewed<div class="underline"></div></div>
    <div class="button-filter" data-filter="Code">Codes<div class="underline"></div></div>
    <div class="button-filter" data-filter="Patent">Patents<div class="underline"></div></div>
    <div class="button-filter" style="width:96px" data-filter="White paper">White paper<div class="underline"></div></div>
  </div>
</div>

<div class="section-wrapper">
  <div class="publications-container">
    <ul class="teaser-container blog">
      {% for post in collections.publications | reverse %}
        <li class="blog-card" data-tags="{{ post.data.tags }}">
          <article class="teaser-card">
            <div class="teaser-image" style="background-image: url('/static/{{ post.data.image }}'); background-size: cover; background-position: center">
              <img src="/static/{{ post.data.image }}" style="display: none;">
              <div class="tag">{{ post.data.tags }}</div>
            </div>
            <div class="teaser-textbox">
              <div class="teas-txt-inner">
                <h3>{{ post.data.title }}</h3>
                <p>{{ post.data.preview }}</p>
              </div>
              <a href="{{ post.url }}" class="button-card">read more<div class="button-arrow"></div></a>
            </div>
          </article>
        </li>
      {% endfor %}
    </ul> <!-- Close the last ul if there are any posts -->
  </div>
</div>


<script>
  document.addEventListener('DOMContentLoaded', function () {
    const filterButtons = document.querySelectorAll('.button-filter');
    const blogCards = document.querySelectorAll('.blog-card');
    const publicationsContainer = document.querySelector('.publications-container');

    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const filter = button.getAttribute('data-filter');

        // Remove selected class and underline-selected from all buttons and their underlines
        filterButtons.forEach(btn => {
          btn.classList.remove('selected');
          btn.querySelector('.underline').classList.remove('underline-selected');
        });

        // Add selected class to the clicked button and underline-selected to its underline
        button.classList.add('selected');
        button.querySelector('.underline').classList.add('underline-selected');

        // Filter the blog cards
        const filteredCards = Array.from(blogCards).filter(card => {
          const tags = card.getAttribute('data-tags').split(',');
          return filter === 'all' || tags.includes(filter);
        });

        // Clear the publications container
        publicationsContainer.innerHTML = '';

        // Rebuild the publications container with filtered cards in rows of 3
        let rowCount = 0;
        let currentUl = null;

        filteredCards.forEach(card => {
          if (rowCount % 3 === 0) {
            if (currentUl) {
              publicationsContainer.appendChild(currentUl);
            }
            currentUl = document.createElement('ul');
            currentUl.classList.add('teaser-container', 'blog');
          }

          const li = document.createElement('li');
          li.classList.add('blog-card');
          li.innerHTML = card.innerHTML;
          currentUl.appendChild(li);

          rowCount++;
        });

        // Append the last ul if it has any children
        if (currentUl && currentUl.children.length > 0) {
          publicationsContainer.appendChild(currentUl);
        }
      });
    });
  });
</script>


<script>
  // Function to dynamically load the script
  function loadBoxHeightScript() {
      var script = document.createElement('script');
      script.src = '../js/boxheight.js';
      script.onload = function() {
          console.log('Script loaded successfully.');
          // Ensure the functions from the script are called
          adjustTextBoxHeights(); // Initial adjustment
          window.addEventListener('resize', adjustTextBoxHeights); // Adjust on window resize
      };
      script.onerror = function() {
          console.error('Error loading script.');
      };
      document.head.appendChild(script);
  }

  // Function to check the screen width and load the script if the condition is met
  function checkAndLoadScript() {
      const breakpoint = 450; // Define the breakpoint

      // Check the screen width
      if (window.innerWidth >= breakpoint) {
          console.log('Screen width is above breakpoint, loading script...');
          loadBoxHeightScript();
      } else {
          console.log('Screen width is below breakpoint, not loading script.');
      }
  }

  // Run the check when the document is ready
  document.addEventListener('DOMContentLoaded', checkAndLoadScript);

  // Run the check on window resize
  window.addEventListener('resize', checkAndLoadScript);

  document.addEventListener('DOMContentLoaded', function () {
    const filterButtons = document.querySelectorAll('.button-filter');
    const blogCards = document.querySelectorAll('.blog-card');
    const publicationsContainer = document.querySelector('.publications-container');

    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const filter = button.getAttribute('data-filter');

        // Remove selected class and underline-selected from all buttons and their underlines
        filterButtons.forEach(btn => {
          btn.classList.remove('selected');
          btn.querySelector('.underline').classList.remove('underline-selected');
        });

        // Add selected class to the clicked button and underline-selected to its underline
        button.classList.add('selected');
        button.querySelector('.underline').classList.add('underline-selected');

        // Filter the blog cards
        const filteredCards = Array.from(blogCards).filter(card => {
          const tags = card.getAttribute('data-tags').split(',');
          return filter === 'all' || tags.includes(filter);
        });

        // Clear the publications container
        publicationsContainer.innerHTML = '';

        // Rebuild the publications container with filtered cards in rows of 3
        let rowCount = 0;
        let currentUl = null;

        filteredCards.forEach(card => {
          if (rowCount % 3 === 0) {
            if (currentUl) {
              publicationsContainer.appendChild(currentUl);
            }
            currentUl = document.createElement('ul');
            currentUl.classList.add('teaser-container', 'blog');
          }

          const li = document.createElement('li');
          li.classList.add('blog-card');
          li.innerHTML = card.innerHTML;
          currentUl.appendChild(li);

          rowCount++;
        });

        // Append the last ul if it has any children
        if (currentUl && currentUl.children.length > 0) {
          publicationsContainer.appendChild(currentUl);
        }

        // Adjust text box heights after filtering
        if (window.innerWidth >= 880) {
            adjustTextBoxHeights();
        }
      });
    });

    // Call adjustTextBoxHeights initially and on window resize
    if (window.innerWidth >= 880) {
        adjustTextBoxHeights(); // Initial adjustment
        window.addEventListener('resize', adjustTextBoxHeights); // Adjust on window resize
    }
  });
</script>
